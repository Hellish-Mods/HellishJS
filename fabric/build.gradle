plugins {
	id "com.github.johnrengelman.shadow" version "7.0.0"
	id "me.shedaniel.unified-publishing" version "0.1.+"
}

def ENV = System.getenv()

architectury {
	platformSetupLoomIde()
	fabric()
}

loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
	dev
}

artifacts {
	dev(jar)
}

dependencies {
	modImplementation("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")
	modImplementation("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}")

	modApi("me.shedaniel:architectury-fabric:${rootProject.architectury_version}")
	modApi("curse.maven:rhizo-1003287:${rootProject.rhizo_version_fabric}")

	modCompileOnly("me.shedaniel:RoughlyEnoughItems-api:${rootProject.fabric_rei_version}") {
		exclude group: "net.fabricmc.fabric-api"
		exclude group: "net.fabricmc"
	}

	modRuntimeOnly("me.shedaniel:RoughlyEnoughItems:${rootProject.fabric_rei_version}") {
		exclude group: "net.fabricmc.fabric-api"
		exclude group: "net.fabricmc"
	}

	common(project(path: ":common", configuration: "dev")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand(
				"version": project.version,
				"fabric_version": rootProject.fabric_loader_version,
				"architectury_version": rootProject.architectury_version
		)
	}
}

shadowJar {
	configurations = [project.configurations.shadowCommon]
	archiveClassifier.set "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveBaseName.set "${rootProject.archives_base_name}-${project.name}"
	archiveClassifier.set null
}

jar {
	archiveClassifier.set "dev"
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

unifiedPublishing {
	project {
		releaseType = project.artifact_type
		gameVersions = [
			"1.16.4",
			"1.16.5"
		]
		gameLoaders = ["fabric", "quilt"]
		displayName = "$project.mod_name Fabric $project.version"
		// changelog = getGitChangelog()
		mainPublication remapJar

		relations {
			depends {
				curseforge = modrinth = "architectury-api"
			}
			depends {
				curseforge = modrinth = "fabric-api"
			}
			depends {
				curseforge = "rhizo"
			}
			
			optional {
				curseforge = modrinth = "roughly-enough-items"
			}
			optional {
				curseforge = "probejs-legacy"
			}
		}

		if (ENV.CURSEFORGE_KEY) {
			curseforge {
				token = ENV.CURSEFORGE_KEY
				id = project.curseforge_id
			}
		}

		if (ENV.MODRINTH_TOKEN) {
			modrinth {
				token = ENV.MODRINTH_TOKEN
				id = project.modrinth_id
				version = "$project.version+$project.name"
			}
		}
	}
}

publishing {
	publications {
		mavenFabric(MavenPublication) {
			artifactId = "${rootProject.archives_base_name}-${project.name}"
			from components.java
		}
	}

	repositories {
		if (ENV.FTB_MAVEN_TOKEN) {
			maven {
				url "https://maven.ftb.dev/release"
				credentials {
					username = "latvian"
					password = "${ENV.FTB_MAVEN_TOKEN}"
				}
			}
		}

		if (ENV.SAPS_TOKEN) {
			maven {
				url "https://maven.saps.dev/minecraft"
				credentials {
					username = "latvian"
					password = "${ENV.SAPS_TOKEN}"
				}
			}
		}
	}
}